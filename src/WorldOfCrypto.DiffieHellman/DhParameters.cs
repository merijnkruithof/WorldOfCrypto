using System.Numerics;
using BigInteger = Org.BouncyCastle.Math.BigInteger;

namespace WorldOfCrypto.DiffieHellman;

/// <summary>
/// We use publicly defined Diffie-Hellman parameters as specified by RFC3526 section 3 for 2048-bit keys.
///
/// Calculating the modulus - the safe prime - takes a lot of time. We can avoid this hiccup by using pre-defined
/// Diffie-Hellman parameters instead of calculating P and G ourselves.
/// </summary>
public class DhParameters
{
    public readonly BigInteger Modulus = new(
        "32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559");

    public readonly BigInteger Generator = new("2");
}